import Foundation

class Session{
    let durationInSeconds: Int
    
    init(durationInSeconds: Int) {
        self.durationInSeconds = durationInSeconds
        
    }
    
    func coinsCount()->Int{ // I made the time measured in seconds, so it will beeasier to test.
        
        if (durationInSeconds<=30){
            return 3
        }
        else if(durationInSeconds<=60){
            return 6
        }
        else{
            return 9
        }
    }
        
}
    
        

protocol SessionManagerDelegate{
    func showSessionStarted()
    func showTimeLeft(secondsLeft: Int)
    func showSessionEnded()
    func showSessionCancelled()
    
}

class SessionManager {

    var sessionDelegate: SessionManagerDelegate
    var timer : Timer?
    let sessionStorage = SessionsStorage()
    
    init(sessionDelegate: SessionManagerDelegate){
        self.sessionDelegate=sessionDelegate
    }
    func startSession(session: Session){
        sessionDelegate.showSessionStarted()
        sessionDelegate.showTimeLeft(secondsLeft: session.durationInSeconds)
        
        var secondsLeft = session.durationInSeconds
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            secondsLeft-=1
            self.sessionDelegate.showTimeLeft(secondsLeft: secondsLeft)
            
            if(secondsLeft==0){
                SessionsStorage.shared.add(session: session)
                self.sessionDelegate.showSessionEnded()
                
                self.timer?.invalidate()
                self.timer = nil
                
                print("before \(CoinsBalance.shared.balance) coins") //Just for testing
                CoinsBalance.shared.addBalance(coins: session.coinsCount())
                print ("after \(CoinsBalance.shared.balance) coins") //Just for testing
            }
        }
        
    }
    func cancelSession(){
        
        timer?.invalidate()
        timer = nil
        self.sessionDelegate.showSessionCancelled()
    }
    }
    

class SessionsStorage{
    
    static let shared = SessionsStorage()
    
    var sessions = [Session]()
    func add(session: Session){
        sessions.append(session)
    }
}
class SessionsView: SessionManagerDelegate{
    var sessionManager: SessionManager?
    
    func userStartedSession(durationInSeconds: Int){
        sessionManager?.startSession(session: Session(durationInSeconds: durationInSeconds))
    }
    func showSessionStarted() {
        print("session started")
    }
    func showSessionEnded() {
        print("session ended")
    }
    func showSessionCancelled(){
        print("session cancelled")
    }
    func showTimeLeft(secondsLeft: Int) {
        print("\(secondsLeft)")
    }
    func userCancelledSession(){
        sessionManager?.cancelSession()
    }
}




class Break{
    
    let durationInSeconds: Int
    
    init(durationsInSeconds: Int) {
        self.durationInSeconds=durationsInSeconds
    }
    func getDuration()->Int{
        return durationInSeconds
    }
}
protocol BreakManagerDelegate{
    func showBreakStarted()
    func showBreakEnded()
    func showTimeLeft(secondsLeft:Int)
 
    
    
    
}
class BreakView : BreakManagerDelegate{
    var breakViewManager: BreakViewManager?
    
    
    func userStartedBreak(durationInSeconds: Int){
        breakViewManager?.startBreak(realBreak: Break(durationsInSeconds: durationInSeconds))
    }
    func showBreakStarted() {
        print("break started")
    }
    
    func showBreakEnded() {
        print("break ended")
    }
    
    func showTimeLeft(secondsLeft: Int) {
        print("\(secondsLeft)")
    }
    

    
    
    
}
class BreakViewManager{

    var breakManagerDelegate: BreakManagerDelegate
    var timer: Timer?
   
    init(breakViewDelegate: BreakManagerDelegate) {
        self.breakManagerDelegate = breakViewDelegate
    }
    
    func startBreak(realBreak: Break){
        breakManagerDelegate.showBreakStarted()
        breakManagerDelegate.showTimeLeft(secondsLeft: realBreak.getDuration())
        
        var secondsLeft=realBreak.getDuration()
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true, block: { _ in
            secondsLeft-=1
            self.breakManagerDelegate.showTimeLeft(secondsLeft: secondsLeft)
            
            if(secondsLeft==0){
                self.breakManagerDelegate.showBreakEnded()
                self.timer?.invalidate()
                self.timer = nil
            }
        })


}
}

class CoinsBalance{
    
    static let shared = CoinsBalance()
    
    var balance = 0
    
    func addBalance(coins: Int){
        balance+=coins
    }
}
let view = SessionsView()

view.sessionManager = SessionManager(sessionDelegate: view) //Daniyar added this line as we need to initialize SessionManger beforehand
view.userStartedSession(durationInSeconds: 10)

DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + .seconds(3)) {
    view.userCancelledSession()
}

let breakView = BreakView()
breakView.breakViewManager = BreakViewManager(breakViewDelegate: breakView)
breakView.userStartedBreak(durationInSeconds: 5)
